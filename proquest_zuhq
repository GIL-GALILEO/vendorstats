#!/usr/local/bin/perl -s

use strict;
use warnings;

my $textfile_build = "no";
my $ebsco_debug = "no";
my $data_dir = "/ss/dbs/stats/";
my $today = `date '+%Y%m%d'`;
chomp($today);

my $makebak_dir = "/usr/local/lag/bin/";
my $makebak = $makebak_dir."makebak";
my $backup_file="";

use vars qw($opt_e $opt_p $opt_l $opt_b $opt_s $opt_f $opt_n $opt_y $opt_x $opt_c $opt_t $opt_o $opt_g $opt_u $opt_z);

#---------------------------------------------------------------------
sub proquest_stats_build {
	my $proquest_textfile_build = @_;
	my $archive_dir = $data_dir . "archive/proquest_archive";
	my $temp_searches_file = $data_dir."stats/temp_stats_monthly_proquest_search_data";
	my $temp_citation_file = $data_dir."stats/temp_stats_monthly_proquest_citation_data";
	my $temp_fulltext_file = $data_dir."stats/temp_stats_monthly_proquest_fulltext_data";
	my $searches_file = $data_dir."stats/stats_monthly_proquest_search_data_new";
	my $citation_file = $data_dir."stats/stats_monthly_proquest_citation_data_new";
	my $fulltext_file = $data_dir."stats/stats_monthly_proquest_fulltext_data_new";
	my $log_file = $data_dir."/stats/proquest_log.txt";
	my $proquest_orphans = $data_dir."/stats/proquest_orphans.txt";
  	my $raw_data_dir = $data_dir . "ftp/galileo_stats/proquest_stats";	
	my @data_files = <$raw_data_dir/*>;
	my $inst_data = $data_dir."/stats/proquest_inst_data.csv";
	my $dbs_data = $data_dir."/stats/proquest_db_name.csv";
	my %inst_table = ();
	my %dbs_table = ();
	my %duplicate_DBs = ('ZUNU-SEARCHES' => 0,
                             'ZUNU-SEARCHES-LINE' => 'EMPTY',
                             'ZUNU-CITATION' => 0,
                             'ZUNU-CITATION-LINE' => 'EMPTY',
                             'ZUNU-FULLTEXT' => 0,
                             'ZUNU-FULLTEXT-LINE' => 'EMPTY',
                             'ZUPN-SEARCHES' => 0,
                             'ZUPN-SEARCHES-LINE' => 'EMPTY',
                             'ZUPN-CITATION' => 0,
                             'ZUPN-CITATION-LINE' => 'EMPTY',
                             'ZUPN-FULLTEXT' => 0,
                             'ZUPN-FULLTEXT-LINE' => 'EMPTY',
                             'ZUCJ-SEARCHES' => 0,
                             'ZUCJ-SEARCHES-LINE' => 'EMPTY',
                             'ZUCJ-CITATION' => 0,
                             'ZUCJ-CITATION-LINE' => 'EMPTY',
                             'ZUCJ-FULLTEXT' => 0,
                             'ZUCJ-FULLTEXT-LINE' => 'EMPTY',
                             'ZUHM-SEARCHES' => 0,
                             'ZUHM-SEARCHES-LINE' => 'EMPTY',
                             'ZUHM-CITATION' => 0,
                             'ZUHM-CITATION-LINE' => 'EMPTY',
                             'ZUHM-FULLTEXT' => 0,
                             'ZUHM-FULLTEXT-LINE' => 'EMPTY',
                             'ZUPJ-SEARCHES' => 0,
                             'ZUPJ-SEARCHES-LINE' => 'EMPTY',
                             'ZUPJ-CITATION' => 0,
                             'ZUPJ-CITATION-LINE' => 'EMPTY',
                             'ZUPJ-FULLTEXT' => 0,
                             'ZUPJ-FULLTEXT-LINE' => 'EMPTY');
	my %searches_dbs_values = (); 
	my %citation_dbs_values = (); 
	my %fulltext_dbs_values = ();
	my ($line,$title_line,$file,$temp,$date,$file_name,$zip_file,$value,$searches_key,$citation_key,$fulltext_key,$inst,$raw_inst,$duplicate_DBs_key)="";
	my @vars=();
	my @keys=();
	my ($date_set,$count,$var_count,$i,$tier_one_found)=0;
	$backup_file="";

	#### build inst_table
	#### $var[0] is the ProQuest code for the institution
	#### $var[2] is the inst code
	open(INST,"$inst_data");
	while(<INST>) {
		$line = $_;
		@vars = split /,/, $line;
		$vars[2] =~ tr/[a-z]/[A-Z]/;
		## added 05/07/11 ##
		$vars[0] =~ s/ //g;
		chomp $vars[2];
		$inst_table{$vars[0]} = $vars[2];
	}
	close(INST);
	@vars=();
	$line="";

	#### build dbs_table
	#### in the file the third vaiable is not used.
	open(DBS,"$dbs_data");
	while(<DBS>) {
		$line = $_;
		@vars = split /##/, $line;
		$vars[1] =~ tr/[a-z]/[A-Z]/;
		## added 3/7/2007
		$vars[0] =~ tr/[a-z]/[A-Z]/;
		$vars[0] =~ s/ //g;
		chomp $vars[1];
		$dbs_table{$vars[0]} = $vars[1];
	}
	@vars=();
	$line="";
	if (-e $searches_file) {
		system("$makebak","$searches_file");
	}
	if (-e $fulltext_file) {
		system("$makebak","$fulltext_file");
	}
	if (-e $citation_file) {
		system("$makebak","$citation_file");
	}

	foreach my $file(@data_files) {
		#### find date of data
		@vars = split /_/, $file;
		if (($file =~ /ProQuest_Usage_Tech/) && !($date_set)) {
			$date = "m" . $vars[5];
			$date =~ s/.csv//;
			$date_set=1;
		} elsif (($file =~ /ProQuest_Usage_ZUHQ/) && !($date_set)) { 
			$date = "m" . $vars[5];
			$date =~ s/.csv//;
			$date_set=1;
		} elsif (($file =~ /ProQuest_Usage_NewFormat/) && !($date_set)) { 
			$date = "m" . $vars[5];
			$date =~ s/.csv//;
			$date_set=1;
			#??#
			print"date=$date\n";
		} elsif (($file =~ /ProQuest_Usage/) && !($date_set)) { 
			$date = "m" . $vars[4];
			$date =~ s/.csv//;
			$date_set=1;
		} else {
			print"ProQuest data file name problem.\n";
			print"Check the file name it should start with ProQuest_Usage or ProQuest_Usage_Tech.\n";
			exit;
		}
                #??# print "date=$date\n";exit;
		@vars=();

		open(SEARCHES, ">$temp_searches_file");
		open(CITATION,">$temp_citation_file");
		open(FULLTEXT,">$temp_fulltext_file");
		open(ORPHAN,">$proquest_orphans");
		$file_name = $file;
		#$file_name =~ s/\/ss\/dbs\/stats\/ftp\/galileo_stats\/proquest_stats\///;
		$file_name =~ s/\/ss\/dbs\/stats\/ftp\/galileo_stats\/proquest_stats\/test\///;
		print "loading $file_name\n";
		#??# exit;
		print ORPHAN $file_name."\n";
		open(INFILE,"$file");
		if(($file_name !~ /ZUHQ/) && ($file_name !~ /NewFormat/)){
		while(<INFILE>) {
			if($count > 1){ ## this assumes that the first two lines areignored
			$line = $_;
			#@vars = split /",/, $line; # removed 4/21 due to change in data file
			@vars = split /,/, $line;
			$var_count = @vars;
			for($i=0;$i<$var_count;$i++) {
			  $value = $vars[$i];
			  $value =~ s/"//g;
				if ($value eq '') {
					$value="blank";
				}	
			  $vars[$i] = $value;
			}
			$vars[4] =~ tr/[a-z]/[A-Z]/;
			$vars[4] =~ s/ //g;
			if (($vars[2] =~ /Client Subtotals/) && ( $vars[4] ne "Subtotal") && ($vars[3] ne "blank")) {
				if (($vars[3] > 0) && ((defined $inst_table{$vars[0]})
					&& (defined $dbs_table{$vars[4]}))) {
					$temp = $date . " " . $inst_table{$vars[0]} . " P Q " . $dbs_table{$vars[4]} . " " . $vars[3] . "\n";

					$searches_key=$inst_table{$vars[0]}."-".$dbs_table{$vars[4]};
					if ((!(defined $searches_dbs_values{$searches_key}))&& (($dbs_table{$vars[4]} eq "ZURL")||($dbs_table{$vars[4]} eq "ZUPN"))){
						$searches_dbs_values{$searches_key} = $temp;
					} elsif (defined $searches_dbs_values{$searches_key}) {
						my @temp_vars=();
						@temp_vars = split / /, $searches_dbs_values{$searches_key};
						if ($temp_vars[5] < $vars[3]) {
							$searches_dbs_values{$searches_key} = $temp;
						}
					} else { 
						print SEARCHES $temp;
					}
				} elsif (($vars[3] > 0) && !(defined $inst_table{$vars[0]})) {
					print ORPHAN $vars[0]."\n";
				} elsif (($vars[3] > 0) &&  !(defined $dbs_table{$vars[4]})) {
						print ORPHAN $vars[4]."\n";
				}
				if (($vars[5] > 0) && ((defined $inst_table{$vars[0]})
				&& (defined $dbs_table{$vars[4]} ))) {
				$temp = $date . " " . $inst_table{$vars[0]} . " P D " . $dbs_table{$vars[4]} . " " . $vars[5] . "\n";
					$citation_key=$inst_table{$vars[0]}."-".$dbs_table{$vars[4]};
					if ((!(defined $citation_dbs_values{$citation_key}))&& (($dbs_table{$vars[4]} eq "ZURL")||($dbs_table{$vars[4]} eq "ZUPN"))){
						$citation_dbs_values{$citation_key} = $temp;
					} elsif (defined $citation_dbs_values{$citation_key}) {
						my @temp_vars=();
						@temp_vars = split / /, $citation_dbs_values{$citation_key};
						if ($temp_vars[5] < $vars[5]) {
							$citation_dbs_values{$citation_key} = $temp;
						}
					} else {
						print CITATION $temp;
					}
				} elsif (($vars[5] > 0) && !(defined $inst_table{$vars[0]})) {
					print ORPHAN $vars[0]."\n";
				} elsif (($vars[5] > 0) &&  !(defined $dbs_table{$vars[4]})) {
					print ORPHAN $vars[4]."\n";
				}
				if (($vars[6] > 0) && ((defined $inst_table{$vars[0]})
				&& (defined $dbs_table{$vars[4]}))) {
				$temp = $date . " " . $inst_table{$vars[0]} . " P F " . $dbs_table{$vars[4]} . " " . $vars[6] . "\n";
					$fulltext_key=$inst_table{$vars[0]}."-".$dbs_table{$vars[4]};
					if ((!(defined $fulltext_dbs_values{$fulltext_key})) && (($dbs_table{$vars[4]} eq "ZURL")||($dbs_table{$vars[4]} eq "ZUPN"))){
						$fulltext_dbs_values{$fulltext_key} = $temp;
					} elsif (defined $fulltext_dbs_values{$fulltext_key}) {
						my @temp_vars=();
						@temp_vars = split / /, $fulltext_dbs_values{$fulltext_key};
						if ($temp_vars[5] < $vars[6]) {
							$fulltext_dbs_values{$fulltext_key} = $temp;
						}
					} else {
						print FULLTEXT $temp;
					}
				} elsif (($vars[6] > 0) && !(defined $inst_table{$vars[0]})) {
					print ORPHAN $vars[0]."\n";
				} elsif (($vars[6] > 0) &&  !(defined $dbs_table{$vars[4]})) {
					print ORPHAN $vars[4]."\n";
				}
			}
			}
			$count++;
			}
		} elsif ($file_name =~ /ZUHQ/){
			while(<INFILE>){
				$line = $_;
				if ($line =~ /Subtotal/){
					@vars = split /,/, $line;
					$vars[0] =~	s/"//g;
					$vars[2] =~	s/"//g;
					$vars[4] =~	s/"//g;
					$vars[5] =~	s/"//g;
					chomp($vars[5]);
					## searches $vars[2]
					if (($vars[2] > 0) && (defined $inst_table{$vars[0]})){
						$temp = $date . " " . $inst_table{$vars[0]} . " P Q ZUHQ " . $vars[2] . "\n";
						print SEARCHES $temp;
					}
					## citation $vars[4]
					if (($vars[4] > 0) && (defined $inst_table{$vars[0]})){
						$temp = $date . " " . $inst_table{$vars[0]} . " P D ZUHQ " . $vars[4] . "\n";
						print CITATION $temp;
					}
					## fulltext $vars[5]
					if (($vars[5] > 0) && (defined $inst_table{$vars[0]})){ 
						$temp = $date . " " . $inst_table{$vars[0]} . " P F ZUHQ " . $vars[5] . "\n";
						print FULLTEXT $temp;
					}
				}
			}
		} elsif ($file_name =~ /NewFormat/){
			print "Reading NewFormat\n";#??#exit;
			while(<INFILE>){
				$line=$_;
				if($line=~/Tier \(1\)/) {
					$title_line = $line;	
					@vars = split / /, $line;
					if(exists $inst_table{$vars[1]}) {
						$inst=$inst_table{$vars[1]};
						$raw_inst=$vars[1];
						$tier_one_found=1
					} else {
						print ORPHAN "$title_line - unknown institution\n\n";
					}
				}
				if(($line=~/Account Subtotals/) && 
                                   ($tier_one_found)){
					if($line=~/,"/){
						@vars=split /,"/,$line;
						$vars[1] =~ s/"//g;
						$vars[2] =~ s/"//g;
						$vars[3] =~ s/"//g;
						$vars[4] =~ s/"//g;
					} else {
						@vars=split /,/,$line;
					}
					$vars[2] =~ tr/[a-z]/[A-Z]/;
					$vars[2] =~ s/ //g;
					if (($vars[1] > 0) && ($vars[2]!~/SUBTOTAL/) && (exists $dbs_table{$vars[2]})
					&& ($vars[2] ne "") && ($inst ne "")){
						$temp = $date . " " . $inst . " P Q " . $dbs_table{$vars[2]} . " " . $vars[1] . "\n";
						#??#print"vars[2]=$vars[2]\n";
						if($vars[2] =~ /PROQUESTNURSING&ALLIEDHEALTHSOURCE/){
							#??#print "Found Nursing & Allied Health SEARCHES\n";
							if($vars[1] > $duplicate_DBs{'ZUNU-SEARCHES'}){
								$duplicate_DBs{'ZUNU-SEARCHES'}=$vars[1];
								$duplicate_DBs{'ZUNU-SEARCHES-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTNEWSSTAND/){
							#??#print "Found Newsstand SEARCHES\n";
							if($vars[1] > $duplicate_DBs{'ZUPN-SEARCHES'}){
								$duplicate_DBs{'ZUPN-SEARCHES'}=$vars[1];
								$duplicate_DBs{'ZUPN-SEARCHES-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTCRIMINALJUSTICE/){
							#??#print "Found Criminal Justice SEARCHES\n";
							if($vars[1] > $duplicate_DBs{'ZUCJ-SEARCHES'}){
								$duplicate_DBs{'ZUCJ-SEARCHES'}=$vars[1];
								$duplicate_DBs{'ZUCJ-SEARCHES-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTHEALTH&MEDICALCOMPLETE/){
							#??#print "Found ProQuest Health & Medical Complete SEARCHES\n";
							if($vars[1] > $duplicate_DBs{'ZUHM-SEARCHES'}){
								$duplicate_DBs{'ZUHM-SEARCHES'}=$vars[1];
								$duplicate_DBs{'ZUHM-SEARCHES-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTPSYCHOLOGYJOURNALS/){
							#??#print "Found ProQuest Psychology Journals SEARCHES\n";
							if($vars[1] > $duplicate_DBs{'ZUPJ-SEARCHES'}){
								$duplicate_DBs{'ZUPJ-SEARCHES'}=$vars[1];
								$duplicate_DBs{'ZUPJ-SEARCHES-LINE'}=$temp;
							}
						} else {
							print SEARCHES $temp;
						}
					} elsif ((!(exists $dbs_table{$vars[2]})) && ($vars[2] ne "") && ($vars[2] !~/SUBTOTAL/)) {
						$temp = $date . " " . $vars[2] . " - unknown DB name\n$title_line\n$line\n";
						print ORPHAN $temp; 
					}
					if (($vars[3] > 0) && ($vars[2]!~/SUBTOTAL/) && (exists $dbs_table{$vars[2]})
					&& ($vars[2] ne "") && ($inst ne "")) {
						$temp = $date . " " . $inst . " P D " . $dbs_table{$vars[2]} . " " . $vars[3] . "\n";

						if($vars[2] =~ /PROQUESTNURSING&ALLIEDHEALTHSOURCE/){
							#??#print "Found Nursing & Allied Health CITATION\n";
							if($vars[3] > $duplicate_DBs{'ZUNU-CITATION'}){
								$duplicate_DBs{'ZUNU-CITATION'}=$vars[3];
								$duplicate_DBs{'ZUNU-CITATION-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTNEWSSTAND/){
							#??#print "Found Newsstand CITATION\n";
							if($vars[3] > $duplicate_DBs{'ZUPN-CITATION'}){
								$duplicate_DBs{'ZUPN-CITATION'}=$vars[3];
								$duplicate_DBs{'ZUPN-CITATION-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTCRIMINALJUSTICE/){
							#??#print "Found Criminal Justice CITATION\n";
							if($vars[3] > $duplicate_DBs{'ZUCJ-CITATION'}){
								$duplicate_DBs{'ZUCJ-CITATION'}=$vars[1];
								$duplicate_DBs{'ZUCJ-CITATION-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTHEALTH&MEDICALCOMPLETE/){
							#??#print "Found ProQuest Health & Medical Complete CITATION\n";
							if($vars[3] > $duplicate_DBs{'ZUHM-CITATION'}){
								$duplicate_DBs{'ZUHM-CITATION'}=$vars[1];
								$duplicate_DBs{'ZUHM-CITATION-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTPSYCHOLOGYJOURNALS/){
							#??#print "Found ProQuest Psychology Journals CITATION\n";
							if($vars[3] > $duplicate_DBs{'ZUPJ-CITATION'}){
								$duplicate_DBs{'ZUPJ-CITATION'}=$vars[1];
								$duplicate_DBs{'ZUPJ-CITATION-LINE'}=$temp;
							}
						} else {
							print CITATION $temp;
						}
					} elsif ((!(exists $dbs_table{$vars[2]})) && ($vars[2] ne "") && ($vars[2] !~/SUBTOTAL/)) {
						$temp = $date . " " . $vars[2] . " - unknown DB name\n$title_line\n$line\n";
						print ORPHAN $temp; 
					}
					if (($vars[4] > 0) && ($vars[2]!~/SUBTOTAL/) && (exists $dbs_table{$vars[2]})
					&& ($vars[2] ne "") && ($inst ne "")){ 
						$temp = $date . " " . $inst . " P F " . $dbs_table{$vars[2]} . " " . $vars[4] . "\n";
						if($vars[2] =~ /PROQUESTNURSING&ALLIEDHEALTHSOURCE/){
							#??#print "Found Nursing & Allied Health FULLTEXT\n";
							if($vars[4] > $duplicate_DBs{'ZUNU-FULLTEXT'}){
								$duplicate_DBs{'ZUNU-FULLTEXT'}=$vars[4];
								$duplicate_DBs{'ZUNU-FULLTEXT-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTNEWSSTAND/){
							#??#print "Found Newsstand FULLTEXT\n";
							if($vars[4] > $duplicate_DBs{'ZUPN-FULLTEXT'}){
								$duplicate_DBs{'ZUPN-FULLTEXT'}=$vars[4];
								$duplicate_DBs{'ZUPN-FULLTEXT-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTCRIMINALJUSTICE/){
							#??#print "Found Criminal Justice FULLTEXT\n";
							if($vars[4] > $duplicate_DBs{'ZUCJ-FULLTEXT'}){
								$duplicate_DBs{'ZUCJ-FULLTEXT'}=$vars[1];
								$duplicate_DBs{'ZUCJ-FULLTEXT-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTHEALTH&MEDICALCOMPLETE/){
							#??#print "Found ProQuest Health & Medical Complete FULLTEXT\n";
							if($vars[4] > $duplicate_DBs{'ZUHM-FULLTEXT'}){
								$duplicate_DBs{'ZUHM-FULLTEXT'}=$vars[1];
								$duplicate_DBs{'ZUHM-FULLTEXT-LINE'}=$temp;
							}
						} elsif ($vars[2] =~ /PROQUESTPSYCHOLOGYJOURNALS/){
							#??#print "Found ProQuest Psychology Journals FULLTEXT\n";
							if($vars[4] > $duplicate_DBs{'ZUPJ-FULLTEXT'}){
								$duplicate_DBs{'ZUPJ-FULLTEXT'}=$vars[1];
								$duplicate_DBs{'ZUPJ-FULLTEXT-LINE'}=$temp;
							}
						} else {
							print FULLTEXT $temp;
						}
					} elsif ((!(exists $dbs_table{$vars[2]})) && ($vars[2] ne "") && ($vars[2] !~/SUBTOTAL/)) {
						$temp = $date . " " . $vars[2] . " - unknown DB name\n$title_line\n$line\n";
						print ORPHAN $temp; 
					}
				}
				if((exists $vars[2]) && ($vars[2]=~/SUBTOTAL/)){
					$tier_one_found=0;	
				}
				if(!($tier_one_found)){
					print SEARCHES $duplicate_DBs{'ZUNU-SEARCHES-LINE'} if ($duplicate_DBs{'ZUNU-SEARCHES-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUNU-SEARCHES-LINE'}='EMPTY';
					$duplicate_DBs{'ZUNU-SEARCHES'}=0;
					print SEARCHES $duplicate_DBs{'ZUPN-SEARCHES-LINE'} if ($duplicate_DBs{'ZUPN-SEARCHES-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPN-SEARCHES-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPN-SEARCHES'}=0;
					print SEARCHES $duplicate_DBs{'ZUCJ-SEARCHES-LINE'} if ($duplicate_DBs{'ZUCJ-SEARCHES-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUCJ-SEARCHES-LINE'}='EMPTY';
					$duplicate_DBs{'ZUCJ-SEARCHES'}=0;
					print SEARCHES $duplicate_DBs{'ZUHM-SEARCHES-LINE'} if ($duplicate_DBs{'ZUHM-SEARCHES-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUHM-SEARCHES-LINE'}='EMPTY';
					$duplicate_DBs{'ZUHM-SEARCHES'}=0;
					print SEARCHES $duplicate_DBs{'ZUPJ-SEARCHES-LINE'} if ($duplicate_DBs{'ZUPJ-SEARCHES-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPJ-SEARCHES-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPJ-SEARCHES'}=0;
					print FULLTEXT $duplicate_DBs{'ZUNU-FULLTEXT-LINE'} if ($duplicate_DBs{'ZUNU-FULLTEXT-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUNU-FULLTEXT-LINE'}='EMPTY';
					$duplicate_DBs{'ZUNU-FULLTEXT'}=0;
					print FULLTEXT $duplicate_DBs{'ZUPN-FULLTEXT-LINE'} if ($duplicate_DBs{'ZUPN-FULLTEXT-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPN-FULLTEXT-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPN-FULLTEXT'}=0;
					print FULLTEXT $duplicate_DBs{'ZUCJ-FULLTEXT-LINE'} if ($duplicate_DBs{'ZUCJ-FULLTEXT-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUCJ-FULLTEXT-LINE'}='EMPTY';
					$duplicate_DBs{'ZUCJ-FULLTEXT'}=0;
					print FULLTEXT $duplicate_DBs{'ZUHM-FULLTEXT-LINE'} if ($duplicate_DBs{'ZUHM-FULLTEXT-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUHM-FULLTEXT-LINE'}='EMPTY';
					$duplicate_DBs{'ZUHM-FULLTEXT'}=0;
					print FULLTEXT $duplicate_DBs{'ZUPJ-FULLTEXT-LINE'} if ($duplicate_DBs{'ZUPJ-FULLTEXT-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPJ-FULLTEXT-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPJ-FULLTEXT'}=0;
					print CITATION $duplicate_DBs{'ZUNU-CITATION-LINE'} if ($duplicate_DBs{'ZUNU-CITATION-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUNU-CITATION-LINE'}='EMPTY';
					$duplicate_DBs{'ZUNU-CITATION'}=0;
					print CITATION $duplicate_DBs{'ZUPN-CITATION-LINE'} if ($duplicate_DBs{'ZUPN-CITATION-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPN-CITATION-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPN-CITATION'}=0;
					print CITATION $duplicate_DBs{'ZUCJ-CITATION-LINE'} if ($duplicate_DBs{'ZUCJ-CITATION-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUCJ-CITATION-LINE'}='EMPTY';
					$duplicate_DBs{'ZUCJ-CITATION'}=0;
					print CITATION $duplicate_DBs{'ZUHM-CITATION-LINE'} if ($duplicate_DBs{'ZUHM-CITATION-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUHM-CITATION-LINE'}='EMPTY';
					$duplicate_DBs{'ZUHM-CITATION'}=0;
					print CITATION $duplicate_DBs{'ZUPJ-CITATION-LINE'} if ($duplicate_DBs{'ZUPJ-CITATION-LINE'} ne 'EMPTY');
					$duplicate_DBs{'ZUPJ-CITATION-LINE'}='EMPTY';
					$duplicate_DBs{'ZUPJ-CITATION'}=0;
				}
			}
				
		}
		@keys = keys %searches_dbs_values;
		foreach my $obsrv(@keys){
			print SEARCHES $searches_dbs_values{$obsrv};
		}
		@keys = keys %citation_dbs_values;
		foreach my $obsrv(@keys){
			print CITATION $citation_dbs_values{$obsrv};
		}
		@keys = keys %fulltext_dbs_values;
		foreach my $obsrv(@keys){
			print FULLTEXT $fulltext_dbs_values{$obsrv};
		}
		close(INFILE);
		$count=0;
	close(SEARCHES);
	close(CITATION);
	close(FULLTEXT);
	close(ORPHAN);
	%searches_dbs_values=();
	%citation_dbs_values=();
	%fulltext_dbs_values=();
	`sort -o $temp_searches_file $temp_searches_file`;		
	`sort -o $temp_citation_file $temp_citation_file`;
	`sort -o $temp_fulltext_file $temp_fulltext_file`;
	`sort -m -o $searches_file $searches_file $temp_searches_file`;
	`sort -m -o $citation_file $citation_file $temp_citation_file`;
	`sort -m -o $fulltext_file $fulltext_file $temp_fulltext_file`;
	system("gzip","$file");
	$zip_file = $file . ".gz";
	system("mv","$zip_file","$archive_dir");
	$date_set=0;
	}
}
